{"version":3,"sources":["../src/utils.js"],"names":["appEvents","hostname","window","location","influxHost","get","Promise","resolve","reject","xhr","XMLHttpRequest","open","url","onreadystatechange","handleResponse","onerror","e","send","readyState","status","res","JSON","parse","responseText","statusText","alert","type","title","msg","emit","copyObject","json","stringify","obj","formatter"],"mappings":";;;;;;;;AAASA,e,gBAAAA,S;;;AACHC,c,GAAWC,OAAOC,QAAP,CAAgBF,Q;;4BACpBG,U,GAAa,YAAYH,QAAZ,GAAuB,Q;;;;qBAEpCI,G,GAAM,SAANA,GAAM,MAAO;AACxB,eAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,cAAIC,MAAM,IAAIC,cAAJ,EAAV;AACAD,cAAIE,IAAJ,CAAS,KAAT,EAAgBC,GAAhB;AACAH,cAAII,kBAAJ,GAAyBC,cAAzB;AACAL,cAAIM,OAAJ,GAAc;AAAA,mBAAKP,OAAOQ,CAAP,CAAL;AAAA,WAAd;AACAP,cAAIQ,IAAJ;;AAEA,mBAASH,cAAT,GAA2B;AAC3B,gBAAIL,IAAIS,UAAJ,KAAmB,CAAvB,EAA0B;AACtB,kBAAIT,IAAIU,MAAJ,KAAe,GAAnB,EAAwB;AACxB,oBAAIC,MAAMC,KAAKC,KAAL,CAAWb,IAAIc,YAAf,CAAV;AACAhB,wBAAQa,GAAR;AACC,eAHD,MAGO;AACPZ,uBAAO,KAAKgB,UAAZ;AACC;AACJ;AACA;AACJ,SAjBM,CAAP;AAkBD,O;;;;uBAEYC,K,GAAQ,SAARA,KAAQ,CAACC,IAAD,EAAOC,KAAP,EAAcC,GAAd,EAAsB;AACzC5B,kBAAU6B,IAAV,CAAe,WAAWH,IAA1B,EAAgC,CAACC,KAAD,EAAQC,GAAR,CAAhC;AACD,O;;;;4BAEYE,U,GAAa,SAAbA,UAAa,MAAO;AAC/B,YAAMC,OAAOV,KAAKW,SAAL,CAAeC,GAAf,CAAb;AACA,eAAOZ,KAAKC,KAAL,CAAWS,IAAX,CAAP;AACD,O;;;;2BAEYG,S,GAAY,SAAZA,SAAY,SAAU,CAElC,C","file":"utils.js","sourcesContent":["import { appEvents } from 'app/core/core'\nconst hostname = window.location.hostname\nexport const influxHost = 'http://' + hostname + ':8086/'\n\nexport const get = url => {\n  return new Promise((resolve, reject) => {\n      var xhr = new XMLHttpRequest()\n      xhr.open('GET', url)\n      xhr.onreadystatechange = handleResponse\n      xhr.onerror = e => reject(e)\n      xhr.send()\n\n      function handleResponse () {\n      if (xhr.readyState === 4) {\n          if (xhr.status === 200) {\n          var res = JSON.parse(xhr.responseText)\n          resolve(res)\n          } else {\n          reject(this.statusText)\n          }\n      }\n      }\n  })\n}\n\nexport const alert = (type, title, msg) => {\n  appEvents.emit('alert-' + type, [title, msg])\n}\n\nexport const copyObject = obj => {\n  const json = JSON.stringify(obj)\n  return JSON.parse(json)\n}\n\nexport const formatter = params => {\n\n}"]}